from abc import ABC, abstractmethod


class BaseAsset(ABC):
    """Abstract Base Class for all asset types in a simulation."""

    def __init__(self, params: dict):
        self.initial_investment = params.get("initial_investment", 0)
        self.value = self.initial_investment
        self.volatility = params.get("volatility", 0)
        self.expected_return = params.get("expected_return", 0)
        self.params = params

    @abstractmethod
    def process_annual_step(self):
        """
        Update the asset's value for one year based on its internal logic
        (e.g., apply growth, pay down mortgage).
        """
        pass

    def withdraw(self, amount: float) -> float:
        """
        Withdraw a certain amount from the asset.
        Returns the amount actually withdrawn.
        """
        withdrawn_amount = min(self.value, amount)
        self.value -= withdrawn_amount
        return withdrawn_amount

    def get_current_value(self) -> float:
        """Return the current market value of the asset."""
        return self.value

    def get_annual_income(self) -> float:
        """Return any income generated by the asset this year (e.g., rent)."""
        return 0.0
